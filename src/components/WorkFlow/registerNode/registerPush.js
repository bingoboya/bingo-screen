
export default function registerPush (lf, clickPlus, mouseDownPlus) {
  lf.register('push', ({ PolygonNode, PolygonNodeModel, h }) => {
    class Node extends PolygonNode {
      getIconShape () {
        const attributes = this.getAttributes()
        const {
          stroke
        } = attributes
        return h(
          'svg',
          {
            x: 18,
            y: 18,
            width: 30,
            height: 30,
            viewBox: '0 0 1024 1024'
          },
          // h(
          //   'path',
          //   {
          //     fill: stroke,
          //     d: 'M866.461538 39.384615H393.846154c-43.323077 0-78.769231 35.446154-78.769231 78.769231v1.969231c0 13.784615 7.876923 27.569231 19.692308 35.446154 5.907692 3.938462 80.738462 78.769231 80.738461 78.769231 5.907692 5.907692 15.753846 0 15.753846-7.876924 0-15.753846 13.784615-31.507692 29.538462-31.507692h334.769231c15.753846 0 31.507692 15.753846 31.507692 31.507692v531.692308c0 15.753846-15.753846 27.569231-31.507692 27.569231h-334.769231c-15.753846 0-27.569231-11.815385-27.569231-27.569231v-1.969231c0-7.876923-9.846154-11.815385-15.753846-5.907692 0 0-74.830769 74.830769-82.707692 78.769231-11.815385 7.876923-19.692308 19.692308-19.692308 35.446154v39.384615c0 43.323077 33.476923 78.769231 76.8 78.769231h472.615385c43.323077 0 80.738462-35.446154 80.738461-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231zM630.153846 945.230769c-33.476923 0-59.076923-25.6-59.076923-59.076923s25.6-59.076923 59.076923-59.076923 59.076923 25.6 59.076923 59.076923-25.6 59.076923-59.076923 59.076923z m-86.646154-474.584615L297.353846 224.492308c-11.815385-11.815385-29.538462-11.815385-41.353846 0l-41.353846 41.353846c-11.815385 11.815385-11.815385 29.538462 0 41.353846l90.584615 90.584615c11.815385 11.815385 3.938462 33.476923-13.784615 33.476923H29.538462c-15.753846 1.969231-29.538462 15.753846-29.538462 31.507693v59.076923c0 15.753846 13.784615 29.538462 29.538462 29.538461h259.938461c17.723077 0 25.6 21.661538 13.784615 33.476923l-90.584615 90.584616c-11.815385 11.815385-11.815385 29.538462 0 41.353846l41.353846 41.353846c11.815385 11.815385 29.538462 11.815385 41.353846 0L543.507692 512c9.846154-9.846154 9.846154-29.538462 0-41.353846z'
          //   }
          // ),
          h(
            'path',
            {
              fill: stroke,
              d: 'M587.52 307.32c-4.52 0-9.04-1.72-12.5-5.18-6.9-6.9-6.9-18.1 0-24.98l66.48-66.48a17.66 17.66 0 0 1 24.98 0c6.9 6.9 6.9 18.1 0 24.98L600 302.14a17.532 17.532 0 0 1-12.48 5.18zM417.98 790.36c-17.42 0-34.82-6.62-48.06-19.86l-96-96c-12.82-12.82-19.86-29.94-19.84-48.2 0.04-18.22 7.14-35.34 19.98-48.18l248.2-248.2a17.66 17.66 0 0 1 24.98 0c6.9 6.9 6.9 18.1 0 24.98l-248.2 248.2c-6.18 6.18-9.6 14.46-9.62 23.28-0.02 8.78 3.34 17 9.48 23.12l96 96c12.76 12.74 33.56 12.68 46.4-0.14l367.44-367.44a17.66 17.66 0 0 1 24.98 0c6.9 6.9 6.9 18.1 0 24.98L466.3 770.34c-13.32 13.34-30.84 20.02-48.32 20.02z'
            }
          ),
          h(
            'path',
            {
              fill: stroke,
              d: 'M250.26 852.94c-4.52 0-9.04-1.72-12.5-5.18l-41.1-41.1c-6.9-6.9-6.9-18.1 0-24.98l29.08-29.08c-6.56-20.64-9.12-50.42 10.48-70.02l35.38-35.38c6.62-6.62 18.36-6.62 24.98 0l100.64 100.64c6.9 6.9 6.9 18.1 0 24.98l-35.38 35.38c-19.6 19.62-49.4 17.04-70.02 10.5l-29.08 29.06a17.616 17.616 0 0 1-12.48 5.18z m-16.12-58.78l16.12 16.12 24.7-24.7a17.714 17.714 0 0 1 20.02-3.5c7.6 3.5 31.7 11.3 41.9 1.12l22.88-22.88-75.66-75.66-22.88 22.88c-10.18 10.18-2.38 34.3 1.16 41.94 3.1 6.72 1.72 14.74-3.52 19.96l-24.72 24.72zM858.4 436.38c-4.52 0-9.04-1.72-12.5-5.18L613.2 198.5c-6.9-6.9-6.9-18.1 0-24.98a17.66 17.66 0 0 1 24.98 0l232.7 232.7c6.9 6.9 6.9 18.1 0 24.98a17.532 17.532 0 0 1-12.48 5.18zM499.18 730.16c-4.52 0-9.04-1.72-12.5-5.18l-167.24-167.24c-6.9-6.9-6.9-18.1 0-24.98a17.66 17.66 0 0 1 24.98 0L511.66 700c6.9 6.9 6.9 18.1 0 24.98a17.532 17.532 0 0 1-12.48 5.18zM927.72 335.86c-3.08 0-6.18-0.8-9.04-2.5-2.38-1.42-59.06-35.48-115.6-92.04-56.56-56.54-90.62-113.22-92.04-115.62-5-8.38-2.24-19.22 6.12-24.22 8.38-5.02 19.22-2.26 24.22 6.12 0.32 0.54 33.38 55.44 86.68 108.74s108.18 86.34 108.72 86.68c8.38 5 11.12 15.86 6.12 24.22-3.3 5.56-9.16 8.62-15.18 8.62zM731.56 497.76c-4.52 0-9.04-1.72-12.5-5.18l-45.6-45.6c-6.9-6.9-6.9-18.1 0-24.98a17.66 17.66 0 0 1 24.98 0l45.6 45.6c6.9 6.9 6.9 18.1 0 24.98a17.532 17.532 0 0 1-12.48 5.18zM662.42 566.9c-4.52 0-9.04-1.72-12.5-5.18l-45.6-45.6c-6.9-6.9-6.9-18.1 0-24.98a17.66 17.66 0 0 1 24.98 0l45.6 45.6c6.9 6.9 6.9 18.1 0 24.98a17.532 17.532 0 0 1-12.48 5.18zM593.28 636.04c-4.52 0-9.04-1.72-12.5-5.18l-45.6-45.6c-6.9-6.9-6.9-18.1 0-24.98a17.66 17.66 0 0 1 24.98 0l45.6 45.6c6.9 6.9 6.9 18.1 0 24.98a17.532 17.532 0 0 1-12.48 5.18z'
            }
          ),
          h(
            'path',
            {
              fill: stroke,
              d: 'M695.56 273.54c-4.52 0-9.04-1.72-12.5-5.18-6.9-6.9-6.9-18.1 0-24.98l73.56-73.56a17.66 17.66 0 0 1 24.98 0c6.9 6.9 6.9 18.1 0 24.98l-73.56 73.56a17.532 17.532 0 0 1-12.48 5.18zM788.54 366.52c-4.52 0-9.04-1.72-12.5-5.18-6.9-6.9-6.9-18.1 0-24.98l73.56-73.56a17.66 17.66 0 0 1 24.98 0c6.9 6.9 6.9 18.1 0 24.98l-73.56 73.56a17.532 17.532 0 0 1-12.48 5.18zM96.88 965.22c-4.52 0-9.04-1.72-12.5-5.18a17.66 17.66 0 0 1 0-24.98l132.82-132.84a17.66 17.66 0 0 1 24.98 0 17.66 17.66 0 0 1 0 24.98l-132.82 132.84a17.616 17.616 0 0 1-12.48 5.18z'
            }
          )
        )
      }
      /**
       * 
       * <svg t="1636087855860" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="10309" width="200" height="200">
       * <path d="M587.52 307.32c-4.52 0-9.04-1.72-12.5-5.18-6.9-6.9-6.9-18.1 0-24.98l66.48-66.48a17.66 17.66 0 0 1 24.98 0c6.9 6.9 6.9 18.1 0 24.98L600 302.14a17.532 17.532 0 0 1-12.48 5.18zM417.98 790.36c-17.42 0-34.82-6.62-48.06-19.86l-96-96c-12.82-12.82-19.86-29.94-19.84-48.2 0.04-18.22 7.14-35.34 19.98-48.18l248.2-248.2a17.66 17.66 0 0 1 24.98 0c6.9 6.9 6.9 18.1 0 24.98l-248.2 248.2c-6.18 6.18-9.6 14.46-9.62 23.28-0.02 8.78 3.34 17 9.48 23.12l96 96c12.76 12.74 33.56 12.68 46.4-0.14l367.44-367.44a17.66 17.66 0 0 1 24.98 0c6.9 6.9 6.9 18.1 0 24.98L466.3 770.34c-13.32 13.34-30.84 20.02-48.32 20.02z" p-id="10310"></path>
       * <path d="M250.26 852.94c-4.52 0-9.04-1.72-12.5-5.18l-41.1-41.1c-6.9-6.9-6.9-18.1 0-24.98l29.08-29.08c-6.56-20.64-9.12-50.42 10.48-70.02l35.38-35.38c6.62-6.62 18.36-6.62 24.98 0l100.64 100.64c6.9 6.9 6.9 18.1 0 24.98l-35.38 35.38c-19.6 19.62-49.4 17.04-70.02 10.5l-29.08 29.06a17.616 17.616 0 0 1-12.48 5.18z m-16.12-58.78l16.12 16.12 24.7-24.7a17.714 17.714 0 0 1 20.02-3.5c7.6 3.5 31.7 11.3 41.9 1.12l22.88-22.88-75.66-75.66-22.88 22.88c-10.18 10.18-2.38 34.3 1.16 41.94 3.1 6.72 1.72 14.74-3.52 19.96l-24.72 24.72zM858.4 436.38c-4.52 0-9.04-1.72-12.5-5.18L613.2 198.5c-6.9-6.9-6.9-18.1 0-24.98a17.66 17.66 0 0 1 24.98 0l232.7 232.7c6.9 6.9 6.9 18.1 0 24.98a17.532 17.532 0 0 1-12.48 5.18zM499.18 730.16c-4.52 0-9.04-1.72-12.5-5.18l-167.24-167.24c-6.9-6.9-6.9-18.1 0-24.98a17.66 17.66 0 0 1 24.98 0L511.66 700c6.9 6.9 6.9 18.1 0 24.98a17.532 17.532 0 0 1-12.48 5.18zM927.72 335.86c-3.08 0-6.18-0.8-9.04-2.5-2.38-1.42-59.06-35.48-115.6-92.04-56.56-56.54-90.62-113.22-92.04-115.62-5-8.38-2.24-19.22 6.12-24.22 8.38-5.02 19.22-2.26 24.22 6.12 0.32 0.54 33.38 55.44 86.68 108.74s108.18 86.34 108.72 86.68c8.38 5 11.12 15.86 6.12 24.22-3.3 5.56-9.16 8.62-15.18 8.62zM731.56 497.76c-4.52 0-9.04-1.72-12.5-5.18l-45.6-45.6c-6.9-6.9-6.9-18.1 0-24.98a17.66 17.66 0 0 1 24.98 0l45.6 45.6c6.9 6.9 6.9 18.1 0 24.98a17.532 17.532 0 0 1-12.48 5.18zM662.42 566.9c-4.52 0-9.04-1.72-12.5-5.18l-45.6-45.6c-6.9-6.9-6.9-18.1 0-24.98a17.66 17.66 0 0 1 24.98 0l45.6 45.6c6.9 6.9 6.9 18.1 0 24.98a17.532 17.532 0 0 1-12.48 5.18zM593.28 636.04c-4.52 0-9.04-1.72-12.5-5.18l-45.6-45.6c-6.9-6.9-6.9-18.1 0-24.98a17.66 17.66 0 0 1 24.98 0l45.6 45.6c6.9 6.9 6.9 18.1 0 24.98a17.532 17.532 0 0 1-12.48 5.18z" p-id="10311"></path>
       * <path d="M695.56 273.54c-4.52 0-9.04-1.72-12.5-5.18-6.9-6.9-6.9-18.1 0-24.98l73.56-73.56a17.66 17.66 0 0 1 24.98 0c6.9 6.9 6.9 18.1 0 24.98l-73.56 73.56a17.532 17.532 0 0 1-12.48 5.18zM788.54 366.52c-4.52 0-9.04-1.72-12.5-5.18-6.9-6.9-6.9-18.1 0-24.98l73.56-73.56a17.66 17.66 0 0 1 24.98 0c6.9 6.9 6.9 18.1 0 24.98l-73.56 73.56a17.532 17.532 0 0 1-12.48 5.18zM96.88 965.22c-4.52 0-9.04-1.72-12.5-5.18a17.66 17.66 0 0 1 0-24.98l132.82-132.84a17.66 17.66 0 0 1 24.98 0 17.66 17.66 0 0 1 0 24.98l-132.82 132.84a17.616 17.616 0 0 1-12.48 5.18z" p-id="10312"></path></svg>
       */
      getPulsShape () {
        const attributes = this.getAttributes()
        // 判断当前节点是否子节点
        const graphData = lf.getGraphData()
        const edges = graphData.edges
        let hasChildNode = false
        edges.some(item => {
          if (item.sourceNodeId === attributes.id) {
            hasChildNode = true
            return true
          }
        })
        if (hasChildNode) {
          return
        }
        return h(
          'svg',
          {
            x: 70,
            y: 20,
            width: 30,
            height: 30,
            viewBox: '0 0 1024 1024',
            class: 'time-plus',
            onClick: (e) => clickPlus(e, attributes),
            onMousedown: (e) => mouseDownPlus(e, attributes),
            onMouseUp: (e) => mouseDownPlus(e, attributes)
          },
          h(
            'path',
            {
              fill: 'red',
              d: 'M512 512m-448 0a448 448 0 1 0 896 0 448 448 0 1 0-896 0Z'
            }
          ),
          h(
            'path',
            {
              fill: 'black',
              d: 'M448 298.666667h128v426.666666h-128z'
            }
          ),
          h(
            'path',
            {
              fill: 'yellow',
              d: 'M298.666667 448h426.666666v128H298.666667z'
            }
          )
        )
      }
      getShape () {
        const attributes = this.getAttributes()
        const {
          width,
          height,
          x,
          y,
          fill,
          fillOpacity,
          strokeWidth,
          stroke,
          strokeOpacity,
          points
        } = attributes
        const transform = `matrix(1 0 0 1 ${x - width / 2} ${y - height / 2})`
        const pointsPath = points.map(point => point.join(',')).join(' ')
        return h(
          'g',
          {
            transform
          },
          [
            h(
              'polygon',
              {
                points: pointsPath,
                fill,
                stroke,
                strokeWidth,
                strokeOpacity,
                fillOpacity
              }
            ),
            this.getIconShape(),
            this.getPulsShape()
          ]
        )
      }
    }
    class Model extends PolygonNodeModel {
      constructor (data, graphModel) {
        data.text = {
          value: (data.text && data.text.value) || '',
          x: data.x,
          y: data.y + 50
        }
        super(data, graphModel)
        const lenght = 35
        this.points = [
          [lenght, 0],
          [lenght * 2, lenght],
          [lenght, lenght * 2],
          [0, lenght]
        ]
      }
    }
    return {
      view: Node,
      model: Model
    }
  })
}
